#! /usr/bin/env bash
### Wynton HPC Shares
###
### Usage:
###  wynton-shares <command> [options]
###
### Commands:
###  list             List all shareholders and their shares
###  total            Total number of slots
###
### Options:
###  --version        Display version
###
###
### Version: 0.0.1
### Copyright: Henrik Bengtsson (2019)
### License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]
call="$0 $*"


# -------------------------------------------------------------------------
# CORE
# -------------------------------------------------------------------------
function mecho() { echo "$@" 1>&2; }

function mdebug() {
    if $debug; then
        mecho "[DEBUG] $*";
    fi
}
function merror() {
    mecho "ERROR: $*";
    exit 1
}
function vecho() {
    if $verbose; then
        echo "$@";
    fi
}

function version() {
    grep -E "^###[ ]*Version:[ ]*" "$0" | sed 's/###[ ]*Version:[ ]*//g'
}

function help() {
    local res=
    res=$(grep "^###" "$0" | grep -vE '^(####|### whatis: )' | cut -b 5-)
    if [[ ${UCSF_WYNTON_TOOLS} == true ]]; then
        res=$(printf "%s\\n" "${res[@]}" | sed -E 's/([^/])wynton-([a-z]+)/\1wynton \2/')
    fi
    printf "%s\\n" "${res[@]}"
}


# -------------------------------------------------------------------------
# SPECIFIC
# -------------------------------------------------------------------------


# -------------------------------------------------------------------------
# MAIN
# -------------------------------------------------------------------------
## Actions
action=help

## Options
debug=false
verbose=false
project=
queue="member.q"

# Parse command-line options
while [[ $# -gt 0 ]]; do
    if test "$1" == "--help"; then
        action=help
    elif test "$1" == "--version"; then
        action=version
    elif test "$1" == "list"; then
        action=$1
    elif test "$1" == "total"; then
        action=$1
    elif test "$1" == "--project"; then
	shift
        project=$1
#    elif test "$1" == "--queue"; then
#	shift
#        queue=$1
    elif test "$1" == "--debug"; then
        debug=true
    elif test "$1" == "--verbose"; then
        verbose=true
    else
        extras="$extras $1"
    fi
    shift
done

if $debug; then
    mdebug "call: $call"
    mdebug "action: $action"
    mdebug "verbose: $verbose"
fi

if [[ $action == "version" ]]; then
    version
    exit 0
elif [[ $action == "help" ]]; then
    help 
    exit 0
fi


function slots_raw() {
    SGE_SINGLE_LINE=true qconf -srqs member_queue_limits | grep -F "queues ${queue} to slots=" | sed -E "s/(.*projects |queues ${queue} to slots=)//g"
}

function slots_total() {
    slots_raw=$1
    echo "${slots_raw}" | awk '{ total+=$2 } END { print total }'
}

function slots_per_project_header() {
    echo "shares   slots total project"
}
    
function slots_per_project() {
    slots_raw=$1
    slots_total=$(slots_total "${slots_raw}")
    slots_per_project=$(echo "${slots_raw}" | awk -v total="${slots_total}" '{ printf "%.06f %5d %5d %s\n", $2/total, $2, total, $1 }' | sort -r)
    slots_per_project_header
    echo "${slots_per_project}"
}

if [[ $action == "list" ]]; then
    res=$(slots_per_project "$(slots_raw)")
    if [[ -n "${project}" ]]; then
        slots_per_project_header
	echo "${res}" | grep -E "${project}"
    else
	echo "${res}"
    fi
elif [[ $action == "total" ]]; then
    slots_total "$(slots_raw)"
fi
